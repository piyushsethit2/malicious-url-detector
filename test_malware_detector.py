import requests
import time
import csv
from datetime import datetime

SAFE_URLS = [
    "https://www.google.com",
    "https://www.facebook.com",
    "https://www.amazon.com",
    "https://www.microsoft.com",
    "https://www.apple.com",
    "https://www.wikipedia.org",
    "https://www.github.com",
    "https://www.stackoverflow.com",
    "https://www.reddit.com",
    "https://www.linkedin.com",
    "https://www.bing.com",
    "https://www.netflix.com",
    "https://www.spotify.com",
    "https://www.dropbox.com",
    "https://www.airbnb.com",
    "https://www.uber.com",
    "https://www.slack.com",
    "https://www.tesla.com",
    "https://www.ibm.com",
    "https://www.oracle.com",
    "https://www.intel.com",
    "https://www.nvidia.com",
    "https://www.cisco.com",
    "https://www.hp.com",
    "https://www.dell.com",
    "https://www.samsung.com",
    "https://www.lg.com",
    "https://www.sony.com",
    "https://www.panasonic.com",
    "https://www.ge.com",
    "https://www.honeywell.com",
    "https://www.3m.com",
    "https://www.caterpillar.com",
    "https://www.deere.com",
    "https://www.cat.com",
    "https://www.volvo.com",
    "https://www.bmw.com",
    "https://www.mercedes-benz.com",
    "https://www.audi.com",
    "https://www.porsche.com",
    "https://www.ferrari.com",
    "https://www.lamborghini.com",
    "https://www.maserati.com",
    "https://www.rolls-royce.com",
    "https://www.bentley.com",
    "https://www.astonmartin.com",
    "https://www.jaguar.com",
    "https://www.landrover.com",
    "https://www.mini.com",
    "https://www.smart.com"
]

MALICIOUS_URLS = [
    "http://malware.testing.google.test/testing/malware/",
    "http://testsafebrowsing.appspot.com/s/malware.html",
    "http://testsafebrowsing.appspot.com/s/phishing.html",
    "http://phishing.test.com/login",
    "http://malicious-site.tk",
    "http://virus-downloads.xyz",
    "http://trojan-injector.ga",
    "http://spyware-checker.cf",
    "http://scam-alerts.gq",
    "http://fakebank-login.com",
    "http://paypal-account-verification.com",
    "http://secure-login-update.com",
    "http://bankofamerica-login-alert.com",
    "http://appleid-verify.com",
    "http://microsoft-support-alert.com",
    "http://amazon-prime-alert.com",
    "http://bit.ly/2malware",
    "http://tinyurl.com/phishingtest",
    "http://goo.gl/viruslink",
    "http://t.co/fakeupdate",
    "http://is.gd/stealinfo",
    "http://v.gd/spywaretest",
    "http://cli.gs/credentialharvest",
    "http://ow.ly/fakebank",
    "http://su.pr/phishingsite",
    "http://twurl.nl/malicious",
    "http://snipurl.com/virus",
    "http://short.to/trojan",
    "http://budurl.com/scam",
    "http://ping.fm/fakepage",
    "http://randomdomain1234567890.com",
    "http://login-update-secure.com",
    "http://account-verify-alert.com",
    "http://update-now-paypal.com",
    "http://secure-amazon-check.com",
    "http://appleid-login-alert.com",
    "http://microsoft-account-update.com",
    "http://phishing-login-alert.com",
    "http://malware-dl.com",
    "http://virus-checker.net",
    "http://trojan-remover.org",
    "http://spyware-fix.info",
    "http://scam-warning.biz",
    "http://fake-login-page.com",
    "http://paypal-security-alert.com",
    "http://bank-login-update.com",
    "http://secure-update-login.com",
    "http://account-verification-alert.com",
    "http://update-now-amazon.com"
]

ALL_URLS = SAFE_URLS + MALICIOUS_URLS

API_URL = "http://localhost:8080/api/scan"

def test_url(url, csv_writer):
    try:
        response = requests.post(API_URL, params={"url": url}, timeout=15)
        if response.status_code == 200:
            data = response.json()
            
            # Print to console
            print(f"URL: {url}")
            print(f"  Status: {data.get('overallStatus')}")
            print(f"  Malicious: {data.get('malicious')}  Confidence: {data.get('confidenceScore')}")
            print(f"  Recommendation: {data.get('recommendation')}")
            print(f"  Threats: {data.get('threats')}")
            print()
            
            # Write to CSV
            csv_writer.writerow({
                'URL': url,
                'Status': data.get('overallStatus', 'ERROR'),
                'Malicious': data.get('malicious', False),
                'Confidence': data.get('confidenceScore', 0.0),
                'Recommendation': data.get('recommendation', ''),
                'Threats': '; '.join(data.get('threats', [])),
                'Timestamp': datetime.now().isoformat()
            })
            
            return True
        else:
            print(f"URL: {url} - ERROR: HTTP {response.status_code}")
            csv_writer.writerow({
                'URL': url,
                'Status': f'HTTP_ERROR_{response.status_code}',
                'Malicious': False,
                'Confidence': 0.0,
                'Recommendation': f'HTTP Error: {response.status_code}',
                'Threats': '',
                'Timestamp': datetime.now().isoformat()
            })
            return False
    except Exception as e:
        print(f"URL: {url} - ERROR: {e}")
        csv_writer.writerow({
            'URL': url,
            'Status': 'EXCEPTION',
            'Malicious': False,
            'Confidence': 0.0,
            'Recommendation': f'Exception: {str(e)}',
            'Threats': '',
            'Timestamp': datetime.now().isoformat()
        })
        return False

def main():
    print(f"Testing {len(ALL_URLS)} URLs...")
    
    # Create CSV file
    csv_filename = f"malware_detection_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
    
    with open(csv_filename, 'w', newline='', encoding='utf-8') as csvfile:
        fieldnames = ['URL', 'Status', 'Malicious', 'Confidence', 'Recommendation', 'Threats', 'Timestamp']
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        
        # Write header
        writer.writeheader()
        
        # Test each URL
        successful_tests = 0
        for url in ALL_URLS:
            if test_url(url, writer):
                successful_tests += 1
            time.sleep(0.2)  # avoid overloading the server
    
    print(f"\nTesting completed!")
    print(f"Successful tests: {successful_tests}/{len(ALL_URLS)}")
    print(f"Results saved to: {csv_filename}")

if __name__ == "__main__":
    main() 