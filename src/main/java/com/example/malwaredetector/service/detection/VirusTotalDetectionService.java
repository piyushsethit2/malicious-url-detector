package com.example.malwaredetector.service.detection;

import com.example.malwaredetector.model.UrlScanResult;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import org.json.JSONObject;

@Service
public class VirusTotalDetectionService implements BaseDetectionService {

    @Value("${virustotal.api.key:YOUR_VIRUSTOTAL_API_KEY}")
    private String apiKey;

    private final HttpClient httpClient;

    public VirusTotalDetectionService() {
        this.httpClient = HttpClient.newBuilder()
                .connectTimeout(Duration.ofSeconds(10))
                .build();
    }

    @Override
    public UrlScanResult.DetectionResult detect(String url) {
        try {
            if ("YOUR_VIRUSTOTAL_API_KEY".equals(apiKey)) {
                return new UrlScanResult.DetectionResult(getMethodName(), false, "API key not configured", 0.0);
            }
            String endpoint = "https://www.virustotal.com/api/v3/urls";
            String encodedUrl = java.util.Base64.getUrlEncoder().encodeToString(url.getBytes());
            // VirusTotal expects the URL to be base64 encoded (without padding)
            encodedUrl = encodedUrl.replace("=", "");
            String reportUrl = "https://www.virustotal.com/api/v3/urls/" + encodedUrl;

            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(reportUrl))
                    .header("x-apikey", apiKey)
                    .timeout(Duration.ofSeconds(10))
                    .GET()
                    .build();
            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            if (response.statusCode() != 200) {
                return new UrlScanResult.DetectionResult(getMethodName(), false, "VirusTotal API error: " + response.statusCode(), 0.0);
            }
            JSONObject json = new JSONObject(response.body());
            JSONObject data = json.optJSONObject("data");
            if (data == null) {
                return new UrlScanResult.DetectionResult(getMethodName(), false, "No data from VirusTotal", 0.0);
            }
            JSONObject attributes = data.optJSONObject("attributes");
            if (attributes == null) {
                return new UrlScanResult.DetectionResult(getMethodName(), false, "No attributes from VirusTotal", 0.0);
            }
            JSONObject lastAnalysisStats = attributes.optJSONObject("last_analysis_stats");
            int malicious = lastAnalysisStats != null ? lastAnalysisStats.optInt("malicious", 0) : 0;
            int suspicious = lastAnalysisStats != null ? lastAnalysisStats.optInt("suspicious", 0) : 0;
            int harmless = lastAnalysisStats != null ? lastAnalysisStats.optInt("harmless", 0) : 0;
            int undetected = lastAnalysisStats != null ? lastAnalysisStats.optInt("undetected", 0) : 0;
            int total = malicious + suspicious + harmless + undetected;
            double confidence = total > 0 ? ((double) (malicious + suspicious)) / total : 0.0;
            boolean isMalicious = malicious > 0 || suspicious > 0;
            String details = String.format("Malicious: %d, Suspicious: %d, Harmless: %d, Undetected: %d", malicious, suspicious, harmless, undetected);
            return new UrlScanResult.DetectionResult(getMethodName(), isMalicious, details, confidence);
        } catch (Exception e) {
            return new UrlScanResult.DetectionResult(getMethodName(), false, "Error: " + e.getMessage(), 0.0);
        }
    }

    @Override
    public String getMethodName() {
        return "VirusTotal";
    }

    @Override
    public double getConfidence() {
        return 0.85;
    }
} 