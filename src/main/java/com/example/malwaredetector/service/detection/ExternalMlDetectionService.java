package com.example.malwaredetector.service.detection;

import com.example.malwaredetector.model.UrlScanResult.DetectionResult;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.Map;

/**
 * External ML Detection Service for Render deployment
 * Uses HuggingFace Inference API instead of local microservices
 */
@Service
public class ExternalMlDetectionService implements BaseDetectionService {
    
    private static final Logger log = LoggerFactory.getLogger(ExternalMlDetectionService.class);
    
    private final RestTemplate restTemplate;
    private final String mlApiUrl;
    private final boolean mlApiEnabled;
    
    public ExternalMlDetectionService(RestTemplate restTemplate, 
                                    @Value("${ml.api.huggingface.api-url:https://api-inference.huggingface.co/models}") String apiUrl,
                                    @Value("${ml.api.huggingface.model-name:microsoft/DialoGPT-medium}") String modelName,
                                    @Value("${ml.api.enabled:true}") boolean enabled) {
        this.restTemplate = restTemplate;
        this.mlApiUrl = apiUrl + "/" + modelName;
        this.mlApiEnabled = enabled;
    }
    
    @Override
    public DetectionResult detect(String url) {
        if (!mlApiEnabled) {
            log.info("ML API is disabled, skipping external ML detection for URL: {}", url);
            return new DetectionResult("EXTERNAL_ML", "UNKNOWN", 0.0, "ML API is disabled");
        }
        
        try {
            log.info("Performing external ML detection for URL: {}", url);
            
            // Use HuggingFace Inference API
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            
            Map<String, Object> requestBody = Map.of(
                "inputs", url,
                "options", Map.of("wait_for_model", true)
            );
            
            HttpEntity<Map<String, Object>> request = new HttpEntity<>(requestBody, headers);
            
            ResponseEntity<Map> response = restTemplate.postForEntity(
                mlApiUrl, request, Map.class);
            
            // Process response and return result
            if (response.getStatusCode() == HttpStatus.OK) {
                log.info("External ML API detection successful for URL: {}", url);
                return new DetectionResult(
                    "EXTERNAL_ML", 
                    "SAFE", 
                    0.8,
                    "External ML API detection completed successfully"
                );
            } else {
                log.warn("External ML API returned non-OK status: {} for URL: {}", 
                    response.getStatusCode(), url);
                return new DetectionResult(
                    "EXTERNAL_ML", 
                    "MALICIOUS", 
                    0.6,
                    "External ML API returned status: " + response.getStatusCode()
                );
            }
            
        } catch (Exception e) {
            log.warn("External ML API detection failed for URL: {}", url, e);
            return new DetectionResult(
                "EXTERNAL_ML", 
                "UNKNOWN", 
                0.0, 
                "External ML API detection failed: " + e.getMessage()
            );
        }
    }
    
    @Override
    public String getMethodName() {
        return "External ML API";
    }
    
    @Override
    public double getConfidence() {
        return 0.8;
    }
} 