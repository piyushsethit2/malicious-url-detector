package com.example.malwaredetector.service.detection;

import com.example.malwaredetector.model.UrlScanResult;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Pattern;

@Service
public class ContentAnalysisService implements BaseDetectionService {

    private final HttpClient httpClient;
    private final DomainWhitelistService whitelistService;
    private static final Pattern SCRIPT_PATTERN = Pattern.compile("<script[^>]*src=[\"']([^\"']*)[\"'][^>]*>");
    private static final Pattern IFRAME_PATTERN = Pattern.compile("<iframe[^>]*src=[\"']([^\"']*)[\"'][^>]*>");
    private static final Pattern REDIRECT_PATTERN = Pattern.compile("window\\.location|location\\.href|document\\.location");

    @Autowired
    public ContentAnalysisService(DomainWhitelistService whitelistService) {
        this.whitelistService = whitelistService;
        this.httpClient = HttpClient.newBuilder()
                .connectTimeout(Duration.ofSeconds(10))
                .build();
    }

    @Override
    public UrlScanResult.DetectionResult detect(String url) {
        try {
            // Check if domain is whitelisted - if so, reduce sensitivity
            boolean isWhitelisted = whitelistService.isWhitelisted(url);
            
            List<String> issues = new ArrayList<>();
            double confidence = 0.0;

            HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(url))
                .header("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36")
                .timeout(Duration.ofSeconds(10))
                .build();

            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            String content = response.body().toLowerCase();

            // Check for suspicious scripts (reduced sensitivity for whitelisted domains)
            if (containsSuspiciousScripts(content)) {
                issues.add("Suspicious JavaScript detected");
                confidence += isWhitelisted ? 0.1 : 0.3; // Reduced for whitelisted domains
            }

            // Check for iframe injection (reduced sensitivity for whitelisted domains)
            if (containsSuspiciousIframes(content)) {
                issues.add("Suspicious iframe detected");
                confidence += isWhitelisted ? 0.2 : 0.4; // Reduced for whitelisted domains
            }

            // Check for redirects (reduced sensitivity for whitelisted domains)
            if (containsRedirects(content)) {
                issues.add("Suspicious redirects detected");
                confidence += isWhitelisted ? 0.1 : 0.25; // Reduced for whitelisted domains
            }

            // Check for obfuscated content (reduced sensitivity for whitelisted domains)
            if (containsObfuscatedContent(content)) {
                issues.add("Obfuscated content detected");
                confidence += isWhitelisted ? 0.2 : 0.35; // Reduced for whitelisted domains
            }

            // Check for suspicious keywords in content (reduced sensitivity for whitelisted domains)
            if (containsSuspiciousKeywords(content)) {
                issues.add("Suspicious keywords in content");
                confidence += isWhitelisted ? 0.1 : 0.2; // Reduced for whitelisted domains
            }

            // Check for external resource loading (reduced sensitivity for whitelisted domains)
            if (containsExternalResources(content)) {
                issues.add("External resources from suspicious domains");
                confidence += isWhitelisted ? 0.05 : 0.15; // Reduced for whitelisted domains
            }

            // Check for form injection (reduced sensitivity for whitelisted domains)
            if (containsSuspiciousForms(content)) {
                issues.add("Suspicious form elements detected");
                confidence += isWhitelisted ? 0.1 : 0.3; // Reduced for whitelisted domains
            }

            // Adjust threshold based on whitelist status
            double threshold = isWhitelisted ? 0.5 : 0.3; // Higher threshold for whitelisted domains
            boolean isMalicious = confidence > threshold;
            confidence = Math.min(confidence, 1.0);

            String details = issues.isEmpty() ? 
                "Content appears legitimate" : 
                "Content issues: " + String.join(", ", issues);

            return new UrlScanResult.DetectionResult(
                getMethodName(), isMalicious, details, confidence
            );

        } catch (Exception e) {
            return new UrlScanResult.DetectionResult(
                getMethodName(), false, "Error: " + e.getMessage(), 0.0
            );
        }
    }

    private boolean containsSuspiciousScripts(String content) {
        String[] suspiciousPatterns = {
            "eval\\s*\\(", "Function\\s*\\(", "unescape", "fromCharCode",
            "String\\.fromCharCode", "document\\.write\\s*\\(", "innerHTML\\s*="
        };

        for (String pattern : suspiciousPatterns) {
            if (Pattern.compile(pattern, Pattern.CASE_INSENSITIVE).matcher(content).find()) {
                return true;
            }
        }
        return false;
    }

    private boolean containsSuspiciousIframes(String content) {
        return IFRAME_PATTERN.matcher(content).find();
    }

    private boolean containsRedirects(String content) {
        return REDIRECT_PATTERN.matcher(content).find();
    }

    private boolean containsObfuscatedContent(String content) {
        // Check for base64 encoded content
        if (content.contains("base64")) {
            return true;
        }

        // Check for hex encoded content
        if (content.contains("\\x") || content.contains("&#x")) {
            return true;
        }

        // Check for URL encoded content
        if (content.contains("%") && content.length() > 100) {
            long percentCount = content.chars().filter(ch -> ch == '%').count();
            if (percentCount > content.length() * 0.1) {
                return true;
            }
        }

        return false;
    }

    private boolean containsSuspiciousKeywords(String content) {
        String[] suspiciousKeywords = {
            "malware", "virus", "trojan", "spyware", "phishing", "scam",
            "hack", "crack", "warez", "nulled", "premium", "download",
            "free", "cracked", "hack", "cheat", "bot", "exploit"
        };

        for (String keyword : suspiciousKeywords) {
            if (content.contains(keyword)) {
                return true;
            }
        }
        return false;
    }

    private boolean containsExternalResources(String content) {
        String[] suspiciousDomains = {
            "malware.com", "virus.com", "hack.com", "crack.com",
            "warez.com", "nulled.com", "premium.com"
        };

        for (String domain : suspiciousDomains) {
            if (content.contains(domain)) {
                return true;
            }
        }
        return false;
    }

    private boolean containsSuspiciousForms(String content) {
        // Check for forms that might be phishing (more specific)
        if (content.contains("<form") && 
            (content.contains("password") || content.contains("login") || content.contains("bank")) &&
            !content.contains("google") && !content.contains("facebook") && !content.contains("amazon")) {
            return true;
        }
        return false;
    }

    @Override
    public String getMethodName() {
        return "Content Analysis";
    }

    @Override
    public double getConfidence() {
        return 0.8;
    }
} 