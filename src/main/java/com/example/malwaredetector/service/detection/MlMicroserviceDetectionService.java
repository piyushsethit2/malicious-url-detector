package com.example.malwaredetector.service.detection;

import com.example.malwaredetector.model.UrlScanResult;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

// @Service  // Disabled to avoid conflicts with TransformerMLDetectionService
public class MlMicroserviceDetectionService implements BaseDetectionService {

    @Value("${ml.microservice.url:http://localhost:5002}")
    private String mlServiceUrl;

    private final HttpClient httpClient;

    public MlMicroserviceDetectionService() {
        this.httpClient = HttpClient.newBuilder()
                .connectTimeout(Duration.ofSeconds(5))
                .build();
    }

    @Override
    public UrlScanResult.DetectionResult detect(String url) {
        try {
            JSONObject req = new JSONObject();
            req.put("url", url);
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(mlServiceUrl + "/predict"))
                    .header("Content-Type", "application/json")
                    .timeout(Duration.ofSeconds(10))
                    .POST(HttpRequest.BodyPublishers.ofString(req.toString()))
                    .build();
            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            if (response.statusCode() != 200) {
                return new UrlScanResult.DetectionResult(getMethodName(), false, "ML microservice error: " + response.statusCode(), 0.0);
            }
            JSONObject json = new JSONObject(response.body());
            String label = json.optString("label", "unknown");
            boolean malicious = "malicious".equalsIgnoreCase(label);
            double confidence = json.optDouble("confidence", 0.0);
            String details = "ML Model: " + json.optString("model", "unknown") + 
                           ", Label: " + label + 
                           ", Confidence: " + String.format("%.3f", confidence);
            return new UrlScanResult.DetectionResult(getMethodName(), malicious, details, confidence);
        } catch (Exception e) {
            return new UrlScanResult.DetectionResult(getMethodName(), false, "Error: " + e.getMessage(), 0.0);
        }
    }

    @Override
    public String getMethodName() {
        return "ML Microservice";
    }

    @Override
    public double getConfidence() {
        return 0.9;
    }
} 