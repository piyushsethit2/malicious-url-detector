package com.example.malwaredetector.service.detection;

import com.example.malwaredetector.model.UrlScanResult;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

@Service
public class GoogleSafeBrowsingService implements BaseDetectionService {

    @Value("${google.api.key}")
    private String googleApiKey;

    private final HttpClient httpClient;

    public GoogleSafeBrowsingService() {
        this.httpClient = HttpClient.newBuilder()
                .connectTimeout(Duration.ofSeconds(10))
                .build();
    }

    @Override
    public UrlScanResult.DetectionResult detect(String url) {
        try {
            if ("YOUR_GOOGLE_SAFE_BROWSING_API_KEY".equals(googleApiKey)) {
                return new UrlScanResult.DetectionResult(
                    getMethodName(), false, "API key not configured", 0.0
                );
            }

            String endpoint = "https://safebrowsing.googleapis.com/v4/threatMatches:find?key=" + googleApiKey;
            String payload = String.format(
                "{\n" +
                "  \"client\": {\n" +
                "    \"clientId\": \"malware-detector\",\n" +
                "    \"clientVersion\": \"1.0\"\n" +
                "  },\n" +
                "  \"threatInfo\": {\n" +
                "    \"threatTypes\": [\"MALWARE\", \"SOCIAL_ENGINEERING\", \"UNWANTED_SOFTWARE\", \"POTENTIALLY_HARMFUL_APPLICATION\"],\n" +
                "    \"platformTypes\": [\"ANY_PLATFORM\"],\n" +
                "    \"threatEntryTypes\": [\"URL\"],\n" +
                "    \"threatEntries\": [{\"url\": \"%s\"}]\n" +
                "  }\n" +
                "}", url);

            HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(endpoint))
                .header("Content-Type", "application/json")
                .POST(HttpRequest.BodyPublishers.ofString(payload))
                .timeout(Duration.ofSeconds(10))
                .build();

            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());

            boolean isMalicious = response.body().contains("matches");
            String details = isMalicious ? 
                "URL matched in Google Safe Browsing database" : 
                "URL not found in Google Safe Browsing database";

            return new UrlScanResult.DetectionResult(
                getMethodName(), isMalicious, details, getConfidence()
            );

        } catch (Exception e) {
            return new UrlScanResult.DetectionResult(
                getMethodName(), false, "Error: " + e.getMessage(), 0.0
            );
        }
    }

    @Override
    public String getMethodName() {
        return "Google Safe Browsing";
    }

    @Override
    public double getConfidence() {
        return 0.9;
    }
} 