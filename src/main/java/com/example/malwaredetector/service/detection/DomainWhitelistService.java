package com.example.malwaredetector.service.detection;

import org.springframework.stereotype.Service;
import java.util.Set;
import java.util.HashSet;
import java.util.concurrent.ConcurrentHashMap;
import java.util.regex.Pattern;
import java.net.URI;
import java.util.logging.Logger;
import java.util.logging.Level;

@Service
public class DomainWhitelistService {
    
    private static final Logger logger = Logger.getLogger(DomainWhitelistService.class.getName());
    
    // Comprehensive whitelist of known legitimate domains
    private final Set<String> whitelistedDomains = ConcurrentHashMap.newKeySet();
    private final Set<String> whitelistedPatterns = ConcurrentHashMap.newKeySet();
    
    public DomainWhitelistService() {
        initializeWhitelist();
    }
    
    private void initializeWhitelist() {
        // Major tech companies
        addToWhitelist("google.com", "google.co.uk", "google.de", "google.fr", "google.it", "google.es", "google.ca", "google.com.au");
        addToWhitelist("facebook.com", "fb.com", "instagram.com", "whatsapp.com", "messenger.com");
        addToWhitelist("amazon.com", "amazon.co.uk", "amazon.de", "amazon.fr", "amazon.it", "amazon.es", "amazon.ca", "amazon.com.au");
        addToWhitelist("microsoft.com", "office.com", "outlook.com", "hotmail.com", "live.com", "skype.com");
        addToWhitelist("apple.com", "icloud.com", "itunes.com", "appstore.com");
        addToWhitelist("netflix.com", "netflix.co.uk", "netflix.de", "netflix.fr", "netflix.it", "netflix.es", "netflix.ca", "netflix.com.au");
        addToWhitelist("twitter.com", "x.com", "t.co");
        addToWhitelist("youtube.com", "youtu.be", "ytimg.com");
        addToWhitelist("instagram.com", "ig.com");
        addToWhitelist("github.com", "githubusercontent.com");
        addToWhitelist("stackoverflow.com", "stackexchange.com");
        addToWhitelist("reddit.com", "redd.it");
        addToWhitelist("wikipedia.org", "wikimedia.org", "wikimediafoundation.org");
        addToWhitelist("linkedin.com", "linkedin.co.uk", "linkedin.de", "linkedin.fr", "linkedin.it", "linkedin.es", "linkedin.ca", "linkedin.com.au");
        addToWhitelist("yahoo.com", "yahoo.co.uk", "yahoo.de", "yahoo.fr", "yahoo.it", "yahoo.es", "yahoo.ca", "yahoo.com.au");
        addToWhitelist("bing.com", "msn.com");
        addToWhitelist("duckduckgo.com");
        
        // Major banks and financial institutions
        addToWhitelist("chase.com", "bankofamerica.com", "wellsfargo.com", "citibank.com", "usbank.com");
        addToWhitelist("paypal.com", "paypal.co.uk", "paypal.de", "paypal.fr", "paypal.it", "paypal.es", "paypal.ca", "paypal.com.au");
        addToWhitelist("stripe.com", "square.com", "venmo.com");
        
        // E-commerce platforms
        addToWhitelist("ebay.com", "ebay.co.uk", "ebay.de", "ebay.fr", "ebay.it", "ebay.es", "ebay.ca", "ebay.com.au");
        addToWhitelist("etsy.com", "shopify.com", "walmart.com", "target.com", "bestbuy.com");
        
        // News and media
        addToWhitelist("cnn.com", "bbc.com", "bbc.co.uk", "reuters.com", "ap.org", "npr.org");
        addToWhitelist("nytimes.com", "washingtonpost.com", "wsj.com", "ft.com", "economist.com");
        
        // Government and educational institutions
        addToWhitelist("gov.uk", "usa.gov", "canada.ca", "australia.gov.au", "germany.de", "france.fr", "italia.it", "spain.es");
        addToWhitelist("harvard.edu", "mit.edu", "stanford.edu", "yale.edu", "princeton.edu", "columbia.edu");
        addToWhitelist("ox.ac.uk", "cam.ac.uk", "ucl.ac.uk", "imperial.ac.uk", "lse.ac.uk");
        
        // Cloud and hosting providers
        addToWhitelist("aws.amazon.com", "cloud.google.com", "azure.microsoft.com", "digitalocean.com", "heroku.com");
        addToWhitelist("github.io", "netlify.com", "vercel.com", "surge.sh", "firebase.google.com");
        
        // Social media and communication
        addToWhitelist("discord.com", "slack.com", "teams.microsoft.com", "zoom.us", "webex.com");
        addToWhitelist("tiktok.com", "snapchat.com", "pinterest.com", "tumblr.com", "medium.com");
        
        // Development and tech tools
        addToWhitelist("npmjs.com", "pypi.org", "rubygems.org", "maven.org", "nuget.org");
        addToWhitelist("docker.com", "kubernetes.io", "terraform.io", "ansible.com", "jenkins.io");
        addToWhitelist("gitlab.com", "bitbucket.org", "atlassian.com", "jira.com", "confluence.com");
        
        // Add common subdomain patterns for whitelisted domains
        whitelistedPatterns.add("*.google.com");
        whitelistedPatterns.add("*.amazon.com");
        whitelistedPatterns.add("*.microsoft.com");
        whitelistedPatterns.add("*.apple.com");
        whitelistedPatterns.add("*.github.com");
        whitelistedPatterns.add("*.stackoverflow.com");
        whitelistedPatterns.add("*.wikipedia.org");
        whitelistedPatterns.add("*.paypal.com");
        whitelistedPatterns.add("*.ebay.com");
        whitelistedPatterns.add("*.netflix.com");
        whitelistedPatterns.add("*.youtube.com");
        whitelistedPatterns.add("*.facebook.com");
        whitelistedPatterns.add("*.twitter.com");
        whitelistedPatterns.add("*.linkedin.com");
        
        logger.info("Domain whitelist initialized with " + whitelistedDomains.size() + " domains and " + whitelistedPatterns.size() + " patterns");
    }
    
    private void addToWhitelist(String... domains) {
        for (String domain : domains) {
            whitelistedDomains.add(domain.toLowerCase());
        }
    }
    
    public boolean isWhitelisted(String url) {
        try {
            String domain = extractDomain(url);
            if (domain == null) {
                return false;
            }
            
            String lowerDomain = domain.toLowerCase();
            
            // Check exact domain match
            if (whitelistedDomains.contains(lowerDomain)) {
                return true;
            }
            
            // Check pattern matches
            for (String pattern : whitelistedPatterns) {
                if (matchesPattern(lowerDomain, pattern)) {
                    return true;
                }
            }
            
            return false;
        } catch (Exception e) {
            logger.log(Level.WARNING, "Error checking whitelist for URL: " + url, e);
            return false;
        }
    }
    
    private String extractDomain(String url) {
        try {
            URI uri = new URI(url);
            String host = uri.getHost();
            return host != null ? host.toLowerCase() : null;
        } catch (Exception e) {
            // Fallback to regex extraction
            Pattern domainPattern = Pattern.compile("https?://([^/]+)");
            java.util.regex.Matcher matcher = domainPattern.matcher(url);
            if (matcher.find()) {
                return matcher.group(1).toLowerCase();
            }
            return null;
        }
    }
    
    private boolean matchesPattern(String domain, String pattern) {
        if (pattern.startsWith("*.")) {
            String suffix = pattern.substring(2);
            return domain.endsWith(suffix);
        }
        return domain.equals(pattern);
    }
    
    public void addToWhitelist(String domain) {
        whitelistedDomains.add(domain.toLowerCase());
        logger.info("Added domain to whitelist: " + domain);
    }
    
    public void removeFromWhitelist(String domain) {
        whitelistedDomains.remove(domain.toLowerCase());
        logger.info("Removed domain from whitelist: " + domain);
    }
    
    public Set<String> getWhitelistedDomains() {
        return new HashSet<>(whitelistedDomains);
    }
} 