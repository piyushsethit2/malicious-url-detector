package com.example.malwaredetector.service.detection;

import com.example.malwaredetector.model.UrlScanResult;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import org.json.JSONObject;

@Service
public class PhishTankDetectionService implements BaseDetectionService {

    @Value("${phishtank.api.key:YOUR_PHISHTANK_API_KEY}")
    private String apiKey;

    private final HttpClient httpClient;

    public PhishTankDetectionService() {
        this.httpClient = HttpClient.newBuilder()
                .connectTimeout(Duration.ofSeconds(10))
                .build();
    }

    @Override
    public UrlScanResult.DetectionResult detect(String url) {
        try {
            // PhishTank API is public, but you can register for an API key for higher limits
            String endpoint = "https://checkurl.phishtank.com/checkurl/";
            String body = "url=" + java.net.URLEncoder.encode(url, java.nio.charset.StandardCharsets.UTF_8) + "&format=json";
            if (!"YOUR_PHISHTANK_API_KEY".equals(apiKey)) {
                body += "&app_key=" + apiKey;
            }
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(endpoint))
                    .header("Content-Type", "application/x-www-form-urlencoded")
                    .timeout(Duration.ofSeconds(10))
                    .POST(HttpRequest.BodyPublishers.ofString(body))
                    .build();
            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            if (response.statusCode() != 200) {
                return new UrlScanResult.DetectionResult(getMethodName(), false, "PhishTank API error: " + response.statusCode(), 0.0);
            }
            JSONObject json = new JSONObject(response.body());
            JSONObject results = json.optJSONObject("results");
            if (results == null) {
                return new UrlScanResult.DetectionResult(getMethodName(), false, "No results from PhishTank", 0.0);
            }
            boolean inDatabase = results.optBoolean("in_database", false);
            boolean isPhish = results.optBoolean("valid", false) && results.optBoolean("verified", false);
            String details = inDatabase ? (isPhish ? "Phishing URL detected by PhishTank" : "URL found but not verified as phishing") : "URL not found in PhishTank database";
            double confidence = isPhish ? 1.0 : (inDatabase ? 0.5 : 0.0);
            return new UrlScanResult.DetectionResult(getMethodName(), isPhish, details, confidence);
        } catch (Exception e) {
            return new UrlScanResult.DetectionResult(getMethodName(), false, "Error: " + e.getMessage(), 0.0);
        }
    }

    @Override
    public String getMethodName() {
        return "PhishTank";
    }

    @Override
    public double getConfidence() {
        return 0.95;
    }
} 