package com.example.malwaredetector.service.detection;

import com.example.malwaredetector.model.UrlScanResult;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.time.Duration;
import java.util.*;
import java.util.regex.Pattern;
import java.util.logging.Logger;
import java.util.logging.Level;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.TimeUnit;

@Service
public class EnhancedContentAnalyzerService implements BaseDetectionService {
    
    private static final Logger logger = Logger.getLogger(EnhancedContentAnalyzerService.class.getName());
    
    private final HttpClient httpClient;
    private final RestTemplate restTemplate;
    private final DomainWhitelistService whitelistService;
    
    // Enhanced patterns for detecting malicious content
    private static final Pattern SUSPICIOUS_JS_PATTERNS = Pattern.compile(
        "(?i)(eval\\s*\\(|Function\\s*\\(|unescape|fromCharCode|String\\.fromCharCode|document\\.write\\s*\\(|innerHTML\\s*=|setTimeout\\s*\\(|setInterval\\s*\\()"
    );
    
    private static final Pattern PHISHING_FORM_PATTERNS = Pattern.compile(
        "(?i)(<form[^>]*>.*?(password|login|username|email|credit.?card|social.?security|ssn|bank|account|verify|pin|security|authentication)[^>]*>)"
    );
    
    private static final Pattern SUSPICIOUS_IFRAME_PATTERNS = Pattern.compile(
        "(?i)(<iframe[^>]*src=[\"']([^\"']*)[\"'][^>]*>)"
    );
    
    private static final Pattern REDIRECT_PATTERNS = Pattern.compile(
        "(?i)(window\\.location|location\\.href|document\\.location|meta.*?refresh|http-equiv.*?refresh|window\\.open|document\\.domain)"
    );
    
    private static final Pattern OBFUSCATED_CONTENT_PATTERNS = Pattern.compile(
        "(?i)(base64|%[0-9a-fA-F]{2}|&#x[0-9a-fA-F]+|\\\\x[0-9a-fA-F]{2}|\\\\u[0-9a-fA-F]{4}|\\\\x[0-9a-fA-F]{2})"
    );
    
    private static final Pattern SUSPICIOUS_KEYWORDS = Pattern.compile(
        "(?i)(malware|virus|trojan|spyware|phishing|scam|fake|hack|crack|warez|keygen|nulled|premium|cheat|bot|exploit|vulnerability|backdoor|rootkit|keylogger|ransomware|adware|spam|download|free|cracked|hack|cheat|bot|exploit|bypass|inject|sql|xss|csrf|ddos|brute|force|overflow|buffer|shell|reverse|bind|meterpreter|payload|dropper|loader|stager|beacon|c2|command|control)"
    );
    
    private static final Pattern SUSPICIOUS_DOMAINS = Pattern.compile(
        "(?i)(bit\\.ly|goo\\.gl|tinyurl|is\\.gd|t\\.co|fb\\.me|ow\\.ly|su\\.pr|twurl|snipurl|short\\.to|BudURL|ping\\.fm|tr\\.im|zip\\.net|sn\\.im|short\\.ie|kl\\.am|wp\\.me|rubyurl|om\\.ly|to\\.ly|bit\\.do|t\\.co|lnkd\\.in|db\\.tt|qr\\.ae|adf\\.ly|goo\\.gl|bitly\\.com|cur\\.lv|tiny\\.cc|ow\\.ly|bit\\.ly|adcrun\\.ch|ity\\.im|q\\.gs|is\\.gd|po\\.st|bc\\.vc|twitthis\\.com|u\\.to|j\\.mp|buzurl\\.com|cutt\\.us|u\\.bb|yourls\\.org|x\\.co|prettylinkpro\\.com|scrnch\\.me|filoops\\.info|vzturl\\.com|qr\\.net|1url\\.com|tweez\\.me|v\\.gd|tr\\.im|link\\.zip\\.net)"
    );
    
    private static final Pattern MALICIOUS_EXTENSIONS = Pattern.compile(
        "(?i)\\.(exe|bat|cmd|com|pif|scr|vbs|js|jar|msi|dmg|app|deb|rpm|apk|ipa|pl|py|sh|ps1|psm1|vbe|wsf|hta|chm|reg|inf|lnk|url|scf|wsh|wsc|msc|gadget|application|appref-ms|appx|appxbundle|msix|msixbundle|msu|msp|mst|ocx|dll|sys|drv|bin|dat|tmp|temp|cache|log|bak|old|swp|swo|lock|pid|sock|fifo|pipe|socket|device|proc|sys|dev|etc|var|usr|home|root|boot|mnt|media|opt|srv|sbin|lib|lib64|bin|sbin|usr|local|share|doc|man|info|include|src|build|dist|target|out|bin|obj|debug|release|build|dist|target|out|bin|obj|debug|release)$"
    );
    
    private static final Pattern SUSPICIOUS_IP_PATTERNS = Pattern.compile(
        "(?i)(10\\.|172\\.(1[6-9]|2[0-9]|3[01])\\.|192\\.168\\.|127\\.|0\\.|169\\.254\\.|224\\.|240\\.)"
    );
    
    @Autowired
    public EnhancedContentAnalyzerService(DomainWhitelistService whitelistService) {
        this.whitelistService = whitelistService;
        this.httpClient = HttpClient.newBuilder()
                .connectTimeout(Duration.ofSeconds(5))
                .followRedirects(HttpClient.Redirect.NORMAL)
                .build();
        this.restTemplate = new RestTemplate();
    }
    
    @Override
    public UrlScanResult.DetectionResult detect(String url) {
        try {
            // Check if domain is whitelisted first
            if (whitelistService.isWhitelisted(url)) {
                return new UrlScanResult.DetectionResult(
                    getMethodName(), false, "Domain is whitelisted as legitimate", 0.0
                );
            }
            
            List<String> issues = new ArrayList<>();
            double confidence = 0.0;
            
            // Analyze URL structure and domain (safe operations)
            confidence += analyzeUrlStructure(url, issues);
            confidence += analyzeDomainReputation(url, issues);
            confidence += analyzeNetworkIndicators(url, issues);
            
            // Try to analyze content if possible (with error handling)
            try {
                String content = fetchContentSafely(url);
                if (content != null && !content.isEmpty()) {
                    confidence += analyzeSuspiciousJavaScript(content, issues);
                    confidence += analyzePhishingForms(content, issues);
                    confidence += analyzeSuspiciousIframes(content, issues);
                    confidence += analyzeRedirects(content, issues);
                    confidence += analyzeObfuscatedContent(content, issues);
                    confidence += analyzeSuspiciousKeywords(content, issues);
                    confidence += analyzeExternalResources(content, issues);
                    confidence += analyzeSuspiciousLinks(content, issues);
                    confidence += analyzeMetaTags(content, issues);
                    confidence += analyzeScriptSources(content, issues);
                } else {
                    issues.add("Site inaccessible - potential indicator of malicious domain");
                    confidence += 0.1;
                }
            } catch (Exception e) {
                logger.log(Level.WARNING, "Error fetching content for URL: " + url, e);
                issues.add("Content analysis failed: " + e.getMessage());
                confidence += 0.05;
            }
            
            // Adjust threshold based on whitelist status - very sensitive detection
            double threshold = whitelistService.isWhitelisted(url) ? 0.6 : 0.15;
            boolean isMalicious = confidence > threshold;
            confidence = Math.min(confidence, 1.0);
            
            String details = issues.isEmpty() ? 
                "No malicious content detected" : 
                "Content issues: " + String.join(", ", issues);
            
            return new UrlScanResult.DetectionResult(
                getMethodName(), isMalicious, details, confidence
            );
            
        } catch (Exception e) {
            logger.log(Level.WARNING, "Error analyzing content for URL: " + url, e);
            return new UrlScanResult.DetectionResult(
                getMethodName(), false, "Error: " + e.getMessage(), 0.0
            );
        }
    }
    
    private String fetchContentSafely(String url) {
        try {
            // Simple content fetch with timeout
            HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(url))
                .header("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36")
                .timeout(Duration.ofSeconds(5))
                .build();
            
            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            
            if (response.statusCode() == 200) {
                return response.body();
            }
        } catch (Exception e) {
            logger.log(Level.FINE, "Could not fetch content for URL: " + url, e);
        }
        return null;
    }
    
    private double analyzeUrlStructure(String url, List<String> issues) {
        double confidence = 0.0;
        
        // Check for suspicious file extensions
        if (MALICIOUS_EXTENSIONS.matcher(url).find()) {
            issues.add("Suspicious file extension detected");
            confidence += 0.4;
        }
        
        // Check for URL shortening services
        if (SUSPICIOUS_DOMAINS.matcher(url).find()) {
            issues.add("URL shortening service detected");
            confidence += 0.3;
        }
        
        // Check for suspicious IP patterns
        if (SUSPICIOUS_IP_PATTERNS.matcher(url).find()) {
            issues.add("Suspicious IP address pattern detected");
            confidence += 0.5;
        }
        
        // Check for random-looking domains
        String domain = extractDomain(url);
        if (isRandomLookingDomain(domain)) {
            issues.add("Random-looking domain name detected");
            confidence += 0.3;
        }
        
        // Check for suspicious keywords in URL
        String lowerUrl = url.toLowerCase();
        String[] suspiciousKeywords = {"login", "signin", "secure", "verify", "account", "bank", "paypal", "ebay", "update", "confirm", "reset", "password", "credential", "invoice", "payment"};
        for (String keyword : suspiciousKeywords) {
            if (lowerUrl.contains(keyword)) {
                issues.add("Suspicious keyword in URL: " + keyword);
                confidence += 0.15;
                break; // Only count the first match to avoid excessive scoring
            }
        }
        
        return confidence;
    }
    
    private double analyzeDomainReputation(String url, List<String> issues) {
        double confidence = 0.0;
        String domain = extractDomain(url);
        
        // Check for newly registered domains (simplified check)
        if (domain.length() > 20) {
            issues.add("Very long domain name detected");
            confidence += 0.2;
        }
        
        // Check for excessive subdomains
        if (domain.split("\\.").length > 3) {
            issues.add("Excessive subdomains detected");
            confidence += 0.25;
        }
        
        return confidence;
    }
    
    private double analyzeNetworkIndicators(String url, List<String> issues) {
        double confidence = 0.0;
        
        try {
            String domain = extractDomain(url);
            InetAddress address = InetAddress.getByName(domain);
            
            // Check for private IP addresses
            if (address.isSiteLocalAddress() || address.isLoopbackAddress()) {
                issues.add("Private/local IP address detected");
                confidence += 0.3;
            }
        } catch (UnknownHostException e) {
            issues.add("Domain resolution failed");
            confidence += 0.1;
        }
        
        return confidence;
    }
    
    private String extractDomain(String url) {
        try {
            URI uri = new URI(url);
            return uri.getHost();
        } catch (Exception e) {
            return url;
        }
    }
    
    private boolean isRandomLookingDomain(String domain) {
        if (domain == null || domain.length() < 10) return false;
        
        // Check for excessive numbers or random characters
        int numbers = domain.replaceAll("[^0-9]", "").length();
        int letters = domain.replaceAll("[^a-zA-Z]", "").length();
        
        return numbers > letters * 0.5 || domain.length() > 30;
    }
    
    private double analyzeSuspiciousJavaScript(String content, List<String> issues) {
        if (SUSPICIOUS_JS_PATTERNS.matcher(content).find()) {
            issues.add("Suspicious JavaScript patterns detected");
            return 0.25;
        }
        return 0.0;
    }
    
    private double analyzePhishingForms(String content, List<String> issues) {
        if (PHISHING_FORM_PATTERNS.matcher(content).find()) {
            issues.add("Phishing form patterns detected");
            return 0.3;
        }
        return 0.0;
    }
    
    private double analyzeSuspiciousIframes(String content, List<String> issues) {
        if (SUSPICIOUS_IFRAME_PATTERNS.matcher(content).find()) {
            issues.add("Suspicious iframe detected");
            return 0.2;
        }
        return 0.0;
    }
    
    private double analyzeRedirects(String content, List<String> issues) {
        if (REDIRECT_PATTERNS.matcher(content).find()) {
            issues.add("Suspicious redirect patterns detected");
            return 0.15;
        }
        return 0.0;
    }
    
    private double analyzeObfuscatedContent(String content, List<String> issues) {
        if (OBFUSCATED_CONTENT_PATTERNS.matcher(content).find()) {
            issues.add("Obfuscated content detected");
            return 0.2;
        }
        return 0.0;
    }
    
    private double analyzeSuspiciousKeywords(String content, List<String> issues) {
        if (SUSPICIOUS_KEYWORDS.matcher(content).find()) {
            issues.add("Suspicious keywords detected");
            return 0.25;
        }
        return 0.0;
    }
    
    private double analyzeExternalResources(String content, List<String> issues) {
        // Check for external scripts or resources
        if (content.contains("script src=") && content.contains("http")) {
            issues.add("External scripts detected");
            return 0.1;
        }
        return 0.0;
    }
    
    private double analyzeSuspiciousLinks(String content, List<String> issues) {
        // Check for suspicious links in content
        if (SUSPICIOUS_DOMAINS.matcher(content).find()) {
            issues.add("Suspicious links in content");
            return 0.15;
        }
        return 0.0;
    }
    
    private double analyzeMetaTags(String content, List<String> issues) {
        // Check for suspicious meta tags
        if (content.contains("meta") && content.contains("refresh")) {
            issues.add("Suspicious meta refresh detected");
            return 0.1;
        }
        return 0.0;
    }
    
    private double analyzeScriptSources(String content, List<String> issues) {
        // Check for inline scripts
        if (content.contains("<script>") && content.contains("</script>")) {
            issues.add("Inline scripts detected");
            return 0.1;
        }
        return 0.0;
    }
    
    @Override
    public String getMethodName() {
        return "Enhanced Content Analysis";
    }
    
    @Override
    public double getConfidence() {
        return 0.8;
    }
} 