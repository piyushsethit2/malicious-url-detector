package com.example.malwaredetector.service.detection;

import com.example.malwaredetector.model.UrlScanResult;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Pattern;

@Service
public class UrlPatternDetectionService implements BaseDetectionService {

    private final DomainWhitelistService whitelistService;

    @Autowired
    public UrlPatternDetectionService(DomainWhitelistService whitelistService) {
        this.whitelistService = whitelistService;
    }

    private static final List<Pattern> SUSPICIOUS_PATTERNS = List.of(
        // IP addresses instead of domain names
        Pattern.compile("\\b(?:\\d{1,3}\\.){3}\\d{1,3}\\b"),
        // Enhanced suspicious keywords (more comprehensive)
        Pattern.compile("(?i)(malware|virus|trojan|spyware|phishing|scam|fake|hack|crack|warez|keygen|nulled|premium|cheat|bot|exploit|vulnerability|backdoor|rootkit|keylogger|ransomware|adware|spam)"),
        // Suspicious TLDs (expanded list)
        Pattern.compile("(?i)\\.(tk|ml|ga|cf|gq|xyz|top|club|site|online|tech|digital|web|app|dev|test|local|info|biz|cc|co|me|tv|ws|eu|asia)$"),
        // Long random strings (reduced threshold to catch more)
        Pattern.compile("[a-zA-Z0-9]{20,}"),
        // Multiple subdomains (reduced threshold)
        Pattern.compile("([a-zA-Z0-9-]+\\.){3,}[a-zA-Z]{2,}"),
        // Enhanced suspicious URL structures
        Pattern.compile("(?i)(wp-admin|wp-content|administrator|admin|signin|banking|payment|verify|update|account|login|secure|ssl|https|www2|www3|www4|www5)"),
        // URL shorteners (expanded list)
        Pattern.compile("(?i)(bit\\.ly|tinyurl|goo\\.gl|t\\.co|is\\.gd|v\\.gd|cli\\.gs|ow\\.ly|su\\.pr|twurl\\.nl|snipurl\\.com|short\\.to|BudURL\\.com|ping\\.fm|tiny\\.cc|short\\.ly|url\\.co|short\\.to|ow\\.ly|su\\.pr|twurl\\.nl|snipurl\\.com|short\\.to|BudURL\\.com|ping\\.fm)"),
        // Suspicious domain patterns
        Pattern.compile("(?i)(phishing|scam|fake|malicious|dangerous|harmful|infected|compromised|suspicious|dodgy|shady|sketchy)"),
        // Brand impersonation patterns
        Pattern.compile("(?i)(paypal-secure|google-secure|facebook-login|amazon-verify|microsoft-update|apple-verify|netflix-account|ebay-secure|bank-verify|credit-card|social-security)")
    );

    private static final List<String> SUSPICIOUS_KEYWORDS = List.of(
        "malware", "virus", "trojan", "spyware", "phishing", "scam", "fake", "hack", "crack", "warez",
        "download", "free", "cracked", "nulled", "premium", "hack", "cheat", "bot", "exploit", "vulnerability"
    );

    @Override
    public UrlScanResult.DetectionResult detect(String url) {
        // Check if domain is whitelisted - if so, return clean result
        if (whitelistService.isWhitelisted(url)) {
            return new UrlScanResult.DetectionResult(
                getMethodName(), false, "Domain is whitelisted as legitimate", 0.0
            );
        }
        
        List<String> detectedPatterns = new ArrayList<>();
        double confidence = 0.0;
        boolean isMalicious = false;

        // Check for suspicious patterns
        for (Pattern pattern : SUSPICIOUS_PATTERNS) {
            if (pattern.matcher(url).find()) {
                detectedPatterns.add("Matched pattern: " + pattern.pattern());
                confidence += 0.15; // Reduced from 0.2
            }
        }

        // Check for suspicious keywords
        String urlLower = url.toLowerCase();
        for (String keyword : SUSPICIOUS_KEYWORDS) {
            if (urlLower.contains(keyword)) {
                detectedPatterns.add("Contains suspicious keyword: " + keyword);
                confidence += 0.1; // Reduced from 0.15
            }
        }

        // Check URL length (increased threshold)
        if (url.length() > 150) { // Increased from 100
            detectedPatterns.add("URL is unusually long");
            confidence += 0.1;
        }

        // Check for excessive special characters (increased threshold)
        long specialCharCount = url.chars().filter(ch -> !Character.isLetterOrDigit(ch) && ch != '.' && ch != '/' && ch != ':' && ch != '-' && ch != '_').count();
        if (specialCharCount > url.length() * 0.4) { // Increased from 0.3
            detectedPatterns.add("Excessive special characters detected");
            confidence += 0.15; // Reduced from 0.2
        }

        // Check for obfuscation techniques (reduced sensitivity)
        if (url.contains("%") || url.contains("\\u") || url.contains("&#")) {
            detectedPatterns.add("URL encoding/obfuscation detected");
            confidence += 0.2; // Reduced from 0.25
        }

        // Determine if malicious based on confidence (increased threshold)
        isMalicious = confidence > 0.4; // Increased from 0.3
        confidence = Math.min(confidence, 1.0);

        String details = detectedPatterns.isEmpty() ? 
            "No suspicious patterns detected" : 
            "Detected patterns: " + String.join(", ", detectedPatterns);

        return new UrlScanResult.DetectionResult(
            getMethodName(), isMalicious, details, confidence
        );
    }

    @Override
    public String getMethodName() {
        return "URL Pattern Analysis";
    }

    @Override
    public double getConfidence() {
        return 0.7;
    }
} 