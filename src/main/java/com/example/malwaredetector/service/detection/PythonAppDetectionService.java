package com.example.malwaredetector.service.detection;

import com.example.malwaredetector.model.UrlScanResult;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

@Service
public class PythonAppDetectionService implements BaseDetectionService {

    @Value("${ml.python-app.microservice.url:https://python-app-microservice.onrender.com}")
    private String pythonAppServiceUrl;

    private final HttpClient httpClient;

    public PythonAppDetectionService() {
        this.httpClient = HttpClient.newBuilder()
                .connectTimeout(Duration.ofSeconds(5))
                .build();
    }

    @Override
    public UrlScanResult.DetectionResult detect(String url) {
        try {
            JSONObject req = new JSONObject();
            req.put("url", url);
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(pythonAppServiceUrl + "/detect"))
                    .header("Content-Type", "application/json")
                    .timeout(Duration.ofSeconds(10))
                    .POST(HttpRequest.BodyPublishers.ofString(req.toString()))
                    .build();
            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
            if (response.statusCode() != 200) {
                return new UrlScanResult.DetectionResult(getMethodName(), false, "Python App microservice error: " + response.statusCode(), 0.0);
            }
            JSONObject json = new JSONObject(response.body());
            boolean malicious = json.optBoolean("is_malicious", false);
            double confidence = json.optDouble("confidence", 0.0);
            String method = json.optString("method", "Python App Microservice");
            String details = method + " - Confidence: " + String.format("%.3f", confidence);
            return new UrlScanResult.DetectionResult(getMethodName(), malicious, details, confidence);
        } catch (Exception e) {
            return new UrlScanResult.DetectionResult(getMethodName(), false, "Error: " + e.getMessage(), 0.0);
        }
    }

    @Override
    public String getMethodName() {
        return "Python App Microservice";
    }

    @Override
    public double getConfidence() {
        return 0.7;
    }
} 