package com.example.malwaredetector.service;

import com.example.malwaredetector.model.UrlScanRequest;
import com.example.malwaredetector.repository.UrlScanRequestRepository;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.LocalDateTime;
import java.util.Base64;

@Service
public class MalwareScanService {

    @Value("${google.api.key}")
    private String googleApiKey;

    private final UrlScanRequestRepository repository;

    public MalwareScanService(UrlScanRequestRepository repository) {
        this.repository = repository;
    }

    public UrlScanRequest scanUrl(String url) throws IOException, InterruptedException {
        UrlScanRequest request = new UrlScanRequest();
        request.setUrl(url);
        request.setScannedAt(LocalDateTime.now());

        boolean isMalicious = checkWithGoogleSafeBrowsing(url);
        request.setStatus(isMalicious ? "MALICIOUS" : "CLEAN");
        request.setSource("GoogleSafeBrowsing");
        request.setDetails(isMalicious ? "Matched in Google Safe Browsing DB" : "Not matched");
        return repository.save(request);
    }

    public java.util.List<UrlScanRequest> getHistory(String url) {
        return repository.findByUrl(url);
    }

    private boolean checkWithGoogleSafeBrowsing(String url) throws IOException, InterruptedException {
        String endpoint = "https://safebrowsing.googleapis.com/v4/threatMatches:find?key=" + googleApiKey;
        String payload = String.format("""
        {
          "client": {
            "clientId": "yourclient",
            "clientVersion": "1.0"
          },
          "threatInfo": {
            "threatTypes": ["MALWARE", "SOCIAL_ENGINEERING"],
            "platformTypes": ["ANY_PLATFORM"],
            "threatEntryTypes": ["URL"],
            "threatEntries": [{"url": "%s"}]
          }
        }
        """, url);

        HttpRequest request = HttpRequest.newBuilder()
            .uri(URI.create(endpoint))
            .header("Content-Type", "application/json")
            .POST(HttpRequest.BodyPublishers.ofString(payload))
            .build();

        HttpClient client = HttpClient.newHttpClient();
        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

        return response.body().contains("matches");
    }
}
