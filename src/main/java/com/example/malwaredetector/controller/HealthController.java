package com.example.malwaredetector.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.client.RestTemplate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.TimeUnit;

@RestController
public class HealthController {
    
    private static final Logger logger = LoggerFactory.getLogger(HealthController.class);
    
    @Value("${ML_MICROSERVICE_URL:${ml.microservice.url:http://localhost:5002}}")
    private String mlMicroserviceUrl;
    
    @Value("${PYTHON_MICROSERVICE_URL:${python.app.microservice.url:http://localhost:5003}}")
    private String pythonAppMicroserviceUrl;
    
    @Value("${ML_MICROSERVICE_3_URL:${ml.microservice.url:http://localhost:5001}}")
    private String mlMicroservice3Url;
    
    private final RestTemplate restTemplate = new RestTemplate();

    @GetMapping("/")
    public ResponseEntity<Map<String, Object>> root() {
        logger.info("Root endpoint requested");
        Map<String, Object> response = new HashMap<>();
        response.put("status", "UP");
        response.put("service", "Malicious URL Detector");
        response.put("version", "1.0.0");
        response.put("message", "AI-powered URL malware detection system");
        return ResponseEntity.ok(response);
    }

    @GetMapping("/actuator/health")
    public ResponseEntity<Map<String, Object>> health() {
        logger.info("Actuator health check requested at /actuator/health");
        Map<String, Object> response = new HashMap<>();
        response.put("status", "UP");
        response.put("timestamp", System.currentTimeMillis());
        return ResponseEntity.ok(response);
    }

    @GetMapping("/api/microservices/status")
    public ResponseEntity<Map<String, Object>> getMicroservicesStatus() {
        logger.info("Microservices status check requested");
        
        Map<String, Object> status = new HashMap<>();
        Map<String, Object> microservices = new HashMap<>();
        
        // Check Python ML Microservice
        CompletableFuture<Map<String, Object>> mlFuture = CompletableFuture.supplyAsync(() -> {
            Map<String, Object> mlStatus = new HashMap<>();
            try {
                String healthUrl = mlMicroserviceUrl + "/health";
                logger.info("Checking ML Microservice health at: {}", healthUrl);
                
                ResponseEntity<String> response = restTemplate.getForEntity(healthUrl, String.class);
                mlStatus.put("status", "UP");
                mlStatus.put("url", mlMicroserviceUrl);
                mlStatus.put("response", response.getBody());
                mlStatus.put("httpStatus", response.getStatusCodeValue());
                logger.info("ML Microservice is UP: {}", response.getBody());
            } catch (Exception e) {
                mlStatus.put("status", "DOWN");
                mlStatus.put("url", mlMicroserviceUrl);
                mlStatus.put("error", e.getMessage());
                logger.error("ML Microservice is DOWN: {}", e.getMessage());
            }
            return mlStatus;
        });
        
        // Check Python App Microservice
        CompletableFuture<Map<String, Object>> appFuture = CompletableFuture.supplyAsync(() -> {
            Map<String, Object> appStatus = new HashMap<>();
            try {
                String healthUrl = pythonAppMicroserviceUrl + "/health";
                logger.info("Checking Python App Microservice health at: {}", healthUrl);
                
                ResponseEntity<String> response = restTemplate.getForEntity(healthUrl, String.class);
                appStatus.put("status", "UP");
                appStatus.put("url", pythonAppMicroserviceUrl);
                appStatus.put("response", response.getBody());
                appStatus.put("httpStatus", response.getStatusCodeValue());
                logger.info("Python App Microservice is UP: {}", response.getBody());
            } catch (Exception e) {
                appStatus.put("status", "DOWN");
                appStatus.put("url", pythonAppMicroserviceUrl);
                appStatus.put("error", e.getMessage());
                logger.error("Python App Microservice is DOWN: {}", e.getMessage());
            }
            return appStatus;
        });
        
        // Check ML Microservice 3
        CompletableFuture<Map<String, Object>> ml3Future = CompletableFuture.supplyAsync(() -> {
            Map<String, Object> ml3Status = new HashMap<>();
            try {
                String healthUrl = mlMicroservice3Url + "/health";
                logger.info("Checking ML Microservice 3 health at: {}", healthUrl);
                
                ResponseEntity<String> response = restTemplate.getForEntity(healthUrl, String.class);
                ml3Status.put("status", "UP");
                ml3Status.put("url", mlMicroservice3Url);
                ml3Status.put("response", response.getBody());
                ml3Status.put("httpStatus", response.getStatusCodeValue());
                logger.info("ML Microservice 3 is UP: {}", response.getBody());
            } catch (Exception e) {
                ml3Status.put("status", "DOWN");
                ml3Status.put("url", mlMicroservice3Url);
                ml3Status.put("error", e.getMessage());
                logger.error("ML Microservice 3 is DOWN: {}", e.getMessage());
            }
            return ml3Status;
        });
        
        try {
            // Wait for all health checks with timeout
            CompletableFuture.allOf(mlFuture, appFuture, ml3Future)
                .get(10, TimeUnit.SECONDS);
            
            microservices.put("python_ml_microservice", mlFuture.get());
            microservices.put("python_app_microservice", appFuture.get());
            microservices.put("ml_microservice_3", ml3Future.get());
            
            // Calculate overall status
            long upCount = microservices.values().stream()
                .mapToLong(ms -> "UP".equals(((Map<String, Object>) ms).get("status")) ? 1 : 0)
                .sum();
            
            String overallStatus = upCount == microservices.size() ? "ALL_UP" : 
                                 upCount > 0 ? "PARTIAL" : "ALL_DOWN";
            
            status.put("overall_status", overallStatus);
            status.put("up_count", upCount);
            status.put("total_count", microservices.size());
            status.put("microservices", microservices);
            status.put("timestamp", System.currentTimeMillis());
            
            logger.info("Microservices status check completed. Overall: {}, Up: {}/{}", 
                       overallStatus, upCount, microservices.size());
            
        } catch (Exception e) {
            logger.error("Error checking microservices status: {}", e.getMessage());
            status.put("overall_status", "ERROR");
            status.put("error", e.getMessage());
            status.put("microservices", microservices);
        }
        
        return ResponseEntity.ok(status);
    }

    @GetMapping("/api/microservices/config")
    public ResponseEntity<Map<String, Object>> getMicroservicesConfig() {
        logger.info("Microservices configuration requested");
        
        Map<String, Object> config = new HashMap<>();
        config.put("ml_microservice_url", mlMicroserviceUrl);
        config.put("python_app_microservice_url", pythonAppMicroserviceUrl);
        config.put("ml_microservice_3_url", mlMicroservice3Url);
        config.put("timestamp", System.currentTimeMillis());
        
        return ResponseEntity.ok(config);
    }
} 