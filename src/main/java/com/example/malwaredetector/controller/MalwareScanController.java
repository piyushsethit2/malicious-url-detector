package com.example.malwaredetector.controller;

import com.example.malwaredetector.model.UrlScanRequest;
import com.example.malwaredetector.model.UrlScanResult;
import com.example.malwaredetector.service.ComprehensiveMalwareDetectionService;
import com.example.malwaredetector.service.detection.DynamicWhitelistManager;
import com.example.malwaredetector.service.detection.TransformerMLDetectionService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import jakarta.validation.Valid;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/scan")
@CrossOrigin(origins = "*")
public class MalwareScanController {

    private final ComprehensiveMalwareDetectionService scanService;
    private final DynamicWhitelistManager whitelistManager;
    private final TransformerMLDetectionService mlService;

    @Autowired
    public MalwareScanController(ComprehensiveMalwareDetectionService scanService, 
                               DynamicWhitelistManager whitelistManager,
                               TransformerMLDetectionService mlService) {
        this.scanService = scanService;
        this.whitelistManager = whitelistManager;
        this.mlService = mlService;
    }

    @PostMapping
    public ResponseEntity<UrlScanResult> scanUrl(@RequestParam String url) {
        try {
            UrlScanResult result = scanService.scanUrl(url);
            return ResponseEntity.ok(result);
        } catch (Exception e) {
            return ResponseEntity.status(500)
                .body(createErrorResult(url, "Error scanning URL: " + e.getMessage()));
        }
    }
    
    @PostMapping("/feedback")
    public ResponseEntity<String> provideFeedback(
            @RequestParam String url,
            @RequestParam boolean wasDetectedAsMalicious,
            @RequestParam boolean wasActuallyMalicious) {
        try {
            whitelistManager.recordScanResult(url, wasDetectedAsMalicious, wasActuallyMalicious);
            return ResponseEntity.ok("Feedback recorded successfully");
        } catch (Exception e) {
            return ResponseEntity.status(500).body("Error recording feedback: " + e.getMessage());
        }
    }
    
    @PostMapping("/whitelist/add")
    public ResponseEntity<String> addToWhitelist(@RequestParam String domain) {
        try {
            whitelistManager.manualAddToWhitelist(domain);
            return ResponseEntity.ok("Domain added to whitelist: " + domain);
        } catch (Exception e) {
            return ResponseEntity.status(500).body("Error adding to whitelist: " + e.getMessage());
        }
    }
    
    @PostMapping("/whitelist/remove")
    public ResponseEntity<String> removeFromWhitelist(@RequestParam String domain) {
        try {
            whitelistManager.manualRemoveFromWhitelist(domain);
            return ResponseEntity.ok("Domain removed from whitelist: " + domain);
        } catch (Exception e) {
            return ResponseEntity.status(500).body("Error removing from whitelist: " + e.getMessage());
        }
    }
    
    @GetMapping("/whitelist/domains")
    public ResponseEntity<Map<String, DynamicWhitelistManager.DomainReputation>> getDomainReputations() {
        try {
            Map<String, DynamicWhitelistManager.DomainReputation> reputations = whitelistManager.getAllDomainReputations();
            return ResponseEntity.ok(reputations);
        } catch (Exception e) {
            return ResponseEntity.status(500).build();
        }
    }

    @PostMapping("/batch")
    public ResponseEntity<List<UrlScanResult>> scanBatch(@RequestBody List<String> urls) {
        try {
            List<UrlScanResult> results = urls.stream()
                .map(url -> {
                    try {
                        return scanService.scanUrl(url);
                    } catch (Exception e) {
                        return createErrorResult(url, "Error scanning URL: " + e.getMessage());
                    }
                })
                .toList();
            return ResponseEntity.ok(results);
        } catch (Exception e) {
            return ResponseEntity.status(500).build();
        }
    }

    @GetMapping("/history")
    public ResponseEntity<List<UrlScanRequest>> getHistory(@RequestParam String url) {
        try {
            List<UrlScanRequest> history = scanService.getHistory(url);
            return ResponseEntity.ok(history);
        } catch (Exception e) {
            return ResponseEntity.status(500).build();
        }
    }

    @GetMapping("/health")
    public ResponseEntity<String> health() {
        return ResponseEntity.ok("Malware Detection Service is running");
    }

    @GetMapping("/ml/health")
    public ResponseEntity<Map<String, Object>> getMLHealth() {
        try {
            boolean isHealthy = mlService.isHealthy();
            return ResponseEntity.ok(Map.of(
                "healthy", isHealthy,
                "service", "TransformerML"
            ));
        } catch (Exception e) {
            return ResponseEntity.status(500)
                .body(Map.of("error", "Error checking ML health: " + e.getMessage()));
        }
    }

    @GetMapping("/ml/info")
    public ResponseEntity<Map<String, Object>> getMLInfo() {
        try {
            org.json.JSONObject info = mlService.getModelInfo();
            return ResponseEntity.ok(Map.of(
                "model_info", info.toMap()
            ));
        } catch (Exception e) {
            return ResponseEntity.status(500)
                .body(Map.of("error", "Error getting ML info: " + e.getMessage()));
        }
    }

    private UrlScanResult createErrorResult(String url, String errorMessage) {
        UrlScanResult result = new UrlScanResult();
        result.setUrl(url);
        result.setMalicious(false);
        result.setOverallStatus("ERROR");
        result.setConfidenceScore(0.0);
        result.setRecommendation("Unable to scan URL due to error: " + errorMessage);
        return result;
    }
}
